module.exports = grammar({
    name: 'futhark',

    extras: ($, original) => [...original, /--.*\n/],

    word: $ => $.id,

    rules: {
        id: $ => /[a-zA-Z_][a-zA-Z0-9_']*/,
        quals: $ => repeat1(seq($.id, ".")),
        qualid: $ => choice($.id, seq($.quals, $.id)),
        binop: $ => token(seq($.opstartchar, repeat($.opchar))),
        qualbinop: $ => choice($.binop, seq($.quals, $.binop), seq("`", $.qualid, "`")),
        fieldid: $ => choice($.decimal, $.id),
        opstartchar: $ => choice("+", "-", "*", "/", "%", "=", "!", ">", "<", "|", "&", "^"),
        opchar: $ => choice($.opstartchar, "."),
        constructor: $ => token(seq("#", $.id)),

        // TODO add floatnumber
        _literal: $ => choice($.intnumber, "true", "false"),

        // TODO write non-decimal integers
        intnumber: $ => /([0-9]+)([ui](8|16|32|64))?/,

        _type: $ => choice(
            $.qualid,
            $.array_type,
            $.tuple_type,
            $.record_type,
            $.sum_type,
            $.function_type,
            $.type_application,
            $.existential_size,
        ),

        array_type: $ => seq("[", optional($._exp), "]", $._type),
        tuple_type: $ => choice(seq("(", ")"), seq("(", $._type, repeat1(seq(",", $._type)), ")")),
        record_type: $ => choice(seq("{", "}"), seq("{", $.fieldid, ":", $._type, repeat(",", $.fieldid, ":", $._type), "}")),
    },
});
